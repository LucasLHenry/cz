from enum import Enum, auto
import numpy as np
import os

TABLE_NUM_BITS = 12
TABLE_LEN = 2 ** TABLE_NUM_BITS
SAMPLE_FREQ = 48000
PATH_TO_TABLES = "/tables/"
FILE_NAME = "waves.h"


file_header = """// autogenerated by scripts/generate_warps.py
// do not modify!!
#include<stdint.h>
#ifndef TABLES_WARPS_H_
#define TABLES_WARPS_H_
"""

array_footer = "};\n"
file_footer = "#endif  // TABLES_WAVES_H_"

def main():
    no_warp = generate_no_warp()
    kink = generate_kink()
    
    file_path = f"{os.getcwd()}{PATH_TO_TABLES}{FILE_NAME}"
    with open(file_path, 'w') as f:
        f.write(file_header)
        write_table(f, "warp_default_table", no_warp)
        write_table(f, "warp_kink_table", kink)
        f.write(file_footer)
        
    
    
def write_table(f, table_name: str, table: list[float]):
    typename = "uint16_t"
    f.write(f"const {typename} {table_name}[{TABLE_LEN}] = {{\n")
    for i in range(TABLE_LEN):
        arr_write_item(f, i, table[i], 32, TABLE_LEN)
    f.write(array_footer)
    
def arr_write_item(f, idx, val_to_write, vals_per_line, arr_len):
    if isinstance(val_to_write, float):
        val_to_write = f"{val_to_write:E}"
    if idx != arr_len-1:
        f.write(f"{val_to_write}, ")
    else:
        f.write(f"{val_to_write}")
    
    if (idx + 1) % vals_per_line == 0:
        f.write("\n")
    
def generate_saw() -> list[int]:
    return list(range(TABLE_LEN))

def generate_sine() -> list[int]:
    arr = []
    
    for i in range(TABLE_LEN):
        val = np.sin(2*np.pi*i/TABLE_LEN)
        arr.append(val)
    return arr

def generate_tri() -> list[float]:
    arr = []
    for i in range(TABLE_LEN):
        val = 4 * i / TABLE_LEN
        if i < TABLE_LEN/4:
            arr.append(val)
        elif i >= TABLE_LEN/4 and i < 3*TABLE_LEN/4:
            arr.append(2-val)
        else:
            arr.append(val-4)
    return arr

if __name__ == "__main__":
    main()