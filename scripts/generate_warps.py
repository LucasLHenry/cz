import numpy as np
import os
from generate_waves import TABLE_LEN, array_footer, file_footer, arr_write_item

TABLE_NUM_BITS = 12
TABLE_LEN = 2 ** TABLE_NUM_BITS
SAMPLE_FREQ = 48000
PATH_TO_TABLES = "/tables/"
FILE_NAME = "warps.h"


file_header = """// autogenerated by scripts/generate_warps.py
// do not modify!!
#include<stdint.h>
#ifndef TABLES_WARPS_H_
#define TABLES_WARPS_H_
"""

def main():
    kink = generate_kink()
    
    file_path = f"{os.getcwd()}{PATH_TO_TABLES}{FILE_NAME}"
    with open(file_path, 'w') as f:
        f.write(file_header)
        write_table(f, "warp_kink_table", kink)
        f.write(file_footer)

def generate_kink() -> list[int]:
    kink_amt_x, kink_amt_y = (0.33, 0.23)
    twoA, twoB = 2*kink_amt_x, 2*kink_amt_y
    slope_1 = (1 - twoB) / (1 + twoA)
    slope_2 = (1 + twoB) / (1 - twoA)
    offset_2 = (TABLE_LEN/2) * (1 - twoB - slope_2*(1 + twoA))
    kink_point_x = TABLE_LEN * (0.5 + kink_amt_x)
    
    arr = []
    for i in range(TABLE_LEN):
        if i < kink_point_x:
            arr.append(int(slope_1*i))
        else:
            arr.append(int(slope_2*i + offset_2))
    return arr
    
def write_table(f, table_name: str, table: list[float]):
    f.write(f"const uint16_t {table_name}[{TABLE_LEN}] = {{\n")
    for i in range(TABLE_LEN):
        arr_write_item(f, i, table[i], 32, TABLE_LEN)
    f.write(array_footer)    
    
if __name__ == "__main__":
    main()